import{_ as a,c as r,o as e,a7 as t}from"./chunks/framework.CRFlJB3f.js";const i="/DataStructureStudy/assets/20240116201050.uJAGU-Bn.png",l="/DataStructureStudy/assets/20240116174616.sThtQjrG.png",o="/DataStructureStudy/assets/20240116174712.Br8f4NKa.png",h="/DataStructureStudy/assets/20240116175251.BeopJNh_.png",s="/DataStructureStudy/assets/20240116180427.3kCPzoho.png",n="/DataStructureStudy/assets/20240116181341.DWA9GfNG.png",p="/DataStructureStudy/assets/20240116183411.DIFqnGvK.png",d="/DataStructureStudy/assets/20240116183209.Dk6_tG8a.png",E="/DataStructureStudy/assets/20240116183620.D4RdCRGl.png",q=JSON.parse('{"title":"基本概念及相关术语","description":"","frontmatter":{},"headers":[],"relativePath":"start/start01.md","filePath":"start/start01.md","lastUpdated":1721807164000}'),k={name:"start/start01.md"},c=t('<h1 id="基本概念及相关术语" tabindex="-1">基本概念及相关术语 <a class="header-anchor" href="#基本概念及相关术语" aria-label="Permalink to &quot;基本概念及相关术语&quot;">​</a></h1><p>主要学习有关数据结构的概念以及基本术语</p><h1 id="一、前言" tabindex="-1">一、前言 <a class="header-anchor" href="#一、前言" aria-label="Permalink to &quot;一、前言&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">程序的定义</p><p></p><p>凭借一句话获得图灵奖的 Pascal 语言之父 —— Nicklaus Wirth ，让他获得图灵奖的这句话就是他提出的著名公式：程序 = 数据结构 + 算法 这个公式对计算机科学的影响程度足以类似物理学中爱因斯坦的 E = MC^2</p></div><h2 id="_1-1-数据结构在计算机学科中的地位" tabindex="-1">1.1 数据结构在计算机学科中的地位 <a class="header-anchor" href="#_1-1-数据结构在计算机学科中的地位" aria-label="Permalink to &quot;1.1 数据结构在计算机学科中的地位&quot;">​</a></h2><p>大学课程安排：[线性代数(概率论) + 程序设计语言 + 离散数学(集合论与图论)] --&gt; 数据结构</p><p><img src="'+i+'" alt="img"></p><h2 id="_1-2-如何学好数据结构" tabindex="-1">1.2 如何学好数据结构 <a class="header-anchor" href="#_1-2-如何学好数据结构" aria-label="Permalink to &quot;1.2 如何学好数据结构&quot;">​</a></h2><p>学好数据结构需要我们：</p><ul><li><strong>勤于思考</strong></li><li><strong>多做练习</strong></li><li><strong>多上机操作</strong></li><li><strong>善于寻求帮助</strong></li><li><strong>不怕困难、不放弃</strong></li></ul><h1 id="二、数据结构的研究" tabindex="-1">二、数据结构的研究 <a class="header-anchor" href="#二、数据结构的研究" aria-label="Permalink to &quot;二、数据结构的研究&quot;">​</a></h1><h2 id="_2-1-如何使用计算机解决问题" tabindex="-1">2.1 如何使用计算机解决问题 <a class="header-anchor" href="#_2-1-如何使用计算机解决问题" aria-label="Permalink to &quot;2.1 如何使用计算机解决问题&quot;">​</a></h2><ol><li>具体问题抽象为数学模型 <ol><li><strong>分析问题</strong></li><li><strong>提取操作对象以及对象间的关系</strong></li><li><strong>使用数学语言进行描述 --&gt; 数据结构</strong></li></ol></li><li>设计算法</li><li>编辑、编译、链接、运行</li><li>调试</li></ol><h2 id="_2-2-使用计算机进行-数值计算" tabindex="-1">2.2 使用计算机进行 数值计算 <a class="header-anchor" href="#_2-2-使用计算机进行-数值计算" aria-label="Permalink to &quot;2.2 使用计算机进行 数值计算&quot;">​</a></h2><ul><li>首先，分析问题、提取操作对象</li><li>然后，找出操作对象之间的关系，用数学语言加以描述，建立相应的数学方程</li><li>最后，求解数学方程：高斯消元法、有限元法、差分法等 —— 计算数学研究范畴</li></ul><div class="note custom-block github-alert"><p class="custom-block-title">该类案例的特点</p><p></p><p>数据元素间的关系简单，但计算复杂，如：</p><ul><li>学生学籍管理系统 数学模型：K U = M 线性方程组</li></ul><img src="'+l+'" alt="img" style="zoom:67%;"><ul><li>预报人口增长情况</li></ul><img src="'+o+'" alt="img" style="zoom:67%;"></div><h2 id="_2-3-使用计算机进行-非数值计算" tabindex="-1">2.3 使用计算机进行 非数值计算 <a class="header-anchor" href="#_2-3-使用计算机进行-非数值计算" aria-label="Permalink to &quot;2.3 使用计算机进行 非数值计算&quot;">​</a></h2><p>这类问题的共性都是无法用数学的公式或方程来描述，是一些 非数值计算 的程序设计问题描述非数值计算问题的数学模型不是数学方程，而是诸如表、树和图 之类的具有逻辑关系的数据</p><h3 id="学生学籍管理系统-1-1" tabindex="-1">学生学籍管理系统 (1:1) <a class="header-anchor" href="#学生学籍管理系统-1-1" aria-label="Permalink to &quot;学生学籍管理系统 (1:1)&quot;">​</a></h3><ul><li>**操作对象：**每位学生的信息 （学号、姓名、性别、籍贯、专业）</li><li>**操作算法：**查询、插入、修改、删除等 操作对象之间的关系：线性关系。</li><li>**对应的数据结构：**线性数据结构中的 线性表</li></ul><p><img src="'+h+'" alt="img"></p><h3 id="对弈问题-1-n" tabindex="-1">对弈问题 （1:n） <a class="header-anchor" href="#对弈问题-1-n" aria-label="Permalink to &quot;对弈问题 （1:n）&quot;">​</a></h3><p>之所以能对弈：策略已经输入计算机，可以根据当前期棋盘格局，来预测棋局发展的局势，甚至最后结局</p><ul><li>**操作对象：**各种棋局状态，即描述棋盘的格局信息</li><li>**操作算法：**走棋，即选择一种策略使棋局状态发生变化 (由一个格局派生出另一个格局)</li><li>**操作对象之间的关系：**一对多 (树状) 非线性关系。</li><li>**对应的数据结构：**非线性结构中的 树</li></ul><p><img src="'+s+'" alt="img"></p><h3 id="地图导航-求最短-最快-路径-m-n" tabindex="-1">地图导航-求最短 (最快) 路径 (m:n) <a class="header-anchor" href="#地图导航-求最短-最快-路径-m-n" aria-label="Permalink to &quot;地图导航-求最短 (最快) 路径 (m:n)&quot;">​</a></h3><ul><li>**操作对象：**各种路径</li><li>**操作算法：**根据条件选取最短 (最快) 的路径</li><li>**操作对象之间的关系：**多对多 (图状) 非线性关系。</li><li>**对应的数据结构：**非线性结构中的 图</li></ul><p><img src="'+n+'" alt="img"></p><h2 id="_2-4-数据结构的定义-研究范畴" tabindex="-1">2.4 数据结构的定义 (研究范畴) <a class="header-anchor" href="#_2-4-数据结构的定义-研究范畴" aria-label="Permalink to &quot;2.4 数据结构的定义 (研究范畴)&quot;">​</a></h2><p>数据结构 是一门研究 非数值计算 的程序设计中计算机的 操作对象 以及它们之间的 关系 和 操作 的学科</p><h1 id="三、基本概念和术语" tabindex="-1">三、基本概念和术语 <a class="header-anchor" href="#三、基本概念和术语" aria-label="Permalink to &quot;三、基本概念和术语&quot;">​</a></h1><h2 id="_3-1-基本概念" tabindex="-1">3.1 基本概念 <a class="header-anchor" href="#_3-1-基本概念" aria-label="Permalink to &quot;3.1 基本概念&quot;">​</a></h2><ol><li><p><strong>数据</strong> 是能输入计算机且能被计算机处理的 <strong>各种符号的集合</strong>，是 <strong>信息的载体</strong> 是 <strong>对客观事物符号化的表示</strong> 能够被计算机识别、存储和加工，包括： 数值型的数据：整数、实数 等 非数值型的数据：文字、图像、图形、声音 等</p></li><li><p><strong>数据元素</strong> 是数据的 <strong>基本单位</strong> 在计算机程序中通常作为一个整体进行考虑和处理。又称为 <strong>元素或记录 (1:1)、结点 (1:n) 和 顶点 (m:n)</strong>。</p><img src="'+p+'" alt="img" style="zoom:67%;"></li><li><p><strong>数据项</strong> 是构成数据元素的不可分割的 <strong>最小单位</strong></p></li></ol><img src="'+d+'" alt="img" style="zoom:67%;"><h2 id="_3-2-数据、数据元素、数据项-的关系" tabindex="-1">3.2 数据、数据元素、数据项 的关系 <a class="header-anchor" href="#_3-2-数据、数据元素、数据项-的关系" aria-label="Permalink to &quot;3.2 数据、数据元素、数据项 的关系&quot;">​</a></h2><p>数据 &gt; 数据元素 &gt; 数据项</p><p>e.g: 学生表 &gt; 个人记录 &gt; 学号、姓名......</p><h2 id="_3-3-数据对象" tabindex="-1">3.3 数据对象 <a class="header-anchor" href="#_3-3-数据对象" aria-label="Permalink to &quot;3.3 数据对象&quot;">​</a></h2><p>数据对象 是 性质相同的数据元素的集合 是 数据的一个子集</p><p><img src="'+E+'" alt="img"></p><div class="note custom-block github-alert"><p class="custom-block-title">数据元素与数据对象</p><p></p><ul><li>数据元素 —— 组成数据的基本单位 与数据的关系为：集合与个体</li><li>数据对象 —— 性质相同的数据元素的集合 与数据的关系为：集合与子集</li></ul></div><h2 id="_3-4-数据结构" tabindex="-1">3.4 数据结构 <a class="header-anchor" href="#_3-4-数据结构" aria-label="Permalink to &quot;3.4 数据结构&quot;">​</a></h2><p>在 <a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6" target="_blank" rel="noreferrer">计算机科学</a> 中，<strong>数据结构</strong>（英语：data structure）是计算机中存储、组织 <a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE" target="_blank" rel="noreferrer">数据</a> 的方式[<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84#cite_note-1" target="_blank" rel="noreferrer">1]</a>，包括两个层次：</p><ul><li>逻辑结构 描述数据元素之间的逻辑关系 与数据的存储无关，独立于计算机 是从具体问题抽象出来的数学模型</li><li>物理结构 (存储结构) 数据元素及其关系在计算机存储器中的结构 (存储方式) 是数据结构在计算机中的表示</li></ul><p>包含的内容：</p><ol><li>数据元素之间的逻辑关系，又称为 逻辑结构</li><li>数据元素及其关系在计算机内存中的表示 (又称为 映象) ，称为数据的 物理结构 或 数据的 存储结构</li><li>数据的 运算和实现，即对数据元素可以施加的操作以及这些操作在相应的存储结构上的实现。</li></ol><p>数据结构意味着 <a href="https://zh.wikipedia.org/wiki/%E4%BB%8B%E9%9D%A2_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)" target="_blank" rel="noreferrer">接口</a> 或 <a href="https://zh.wikipedia.org/wiki/%E5%B0%81%E8%A3%85_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)" target="_blank" rel="noreferrer">封装</a>：一个数据结构可被视为两个函数之间的接口，或者是由 <a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">数据类型</a> 联合组成的存储内容的访问方法封装。</p><p>大多数数据结构都由 <a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%88%97" target="_blank" rel="noreferrer">数列</a>、<a href="https://zh.wikipedia.org/wiki/%E8%AE%B0%E5%BD%95" target="_blank" rel="noreferrer">记录</a>、<a href="https://zh.wikipedia.org/wiki/%E6%A0%87%E7%AD%BE%E8%81%94%E5%90%88" target="_blank" rel="noreferrer">可辨识联合</a>、<a href="https://zh.wikipedia.org/wiki/%E5%8F%83%E7%85%A7" target="_blank" rel="noreferrer">引用</a> 等基本类型构成。举例而言，可为空的引用（nullable reference）是引用与可辨识联合的结合体，而最简单的链式结构 <a href="https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8" target="_blank" rel="noreferrer">链表</a> 则是由记录与可空引用构成。</p><p>数据结构可透过 <a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80" target="_blank" rel="noreferrer">编程语言</a> 所提供的 <a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">数据类型</a>、<a href="https://zh.wikipedia.org/wiki/%E5%8F%83%E7%85%A7" target="_blank" rel="noreferrer">引用</a> 及其他操作加以实现。一个设计良好的数据结构，应该在尽可能使用较少的时间与空间资源的前提下，支持各种程序执行。[<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84#cite_note-2" target="_blank" rel="noreferrer">2]</a></p><p>不同种类的数据结构适合不同种类的应用，部分数据结构甚至是为了解决特定问题而设计出来的。例如 <a href="https://zh.wikipedia.org/wiki/B%E6%A0%91" target="_blank" rel="noreferrer">B树</a> 即为加快树状结构访问速度而设计的数据结构，常被应用在数据库和文件系统上。</p><p>正确的数据结构选择可以提高 <a href="https://zh.wikipedia.org/wiki/%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noreferrer">算法</a> 的效率（请参考 <a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87" target="_blank" rel="noreferrer">算法效率</a>）。在<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F" target="_blank" rel="noreferrer">计算机程序</a>设计的过程中，选择适当的数据结构是一项重要工作。许多大型系统的编写经验显示，<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88" target="_blank" rel="noreferrer">程序设计</a> 的困难程度与最终成果的质量与表现，取决于是否选择了最适合的数据结构。</p><p><a href="https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B" target="_blank" rel="noreferrer">系统架构</a> 的关键因素是数据结构而非算法的见解，导致了多种形式化的设计方法与 <a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80" target="_blank" rel="noreferrer">编程语言</a> 的出现。绝大多数的语言都带有某种程度上的 <a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%9D%97_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)" target="_blank" rel="noreferrer">模块化</a> 思想，透过将数据结构的具体实现封装隐藏于用户界面之后的方法，来让不同的应用程序能够安全地重用这些数据结构。<a href="https://zh.wikipedia.org/wiki/C%2B%2B" target="_blank" rel="noreferrer">C++</a>、<a href="https://zh.wikipedia.org/wiki/Java" target="_blank" rel="noreferrer">Java</a>、<a href="https://zh.wikipedia.org/wiki/Python" target="_blank" rel="noreferrer">Python</a> 等 <a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noreferrer">面向对象</a> 的编程语言可使用 <a href="https://zh.wikipedia.org/wiki/%E7%B1%BB_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)" target="_blank" rel="noreferrer">类</a> 来达到这个目的。</p><p>因为数据结构概念的普及，现代编程语言及其 <a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83" target="_blank" rel="noreferrer">API</a> 中都包含了多种默认的数据结构，例如C++<a href="https://zh.wikipedia.org/wiki/%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93" target="_blank" rel="noreferrer">标准模板库</a>中的容器、<a href="https://zh.wikipedia.org/wiki/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6" target="_blank" rel="noreferrer">Java集合框架</a> 以及微软的<a href="https://zh.wikipedia.org/wiki/.NET_Framework" target="_blank" rel="noreferrer">.NET Framework</a>。</p><div class="note custom-block github-alert"><p class="custom-block-title">数据结构的特点</p><p></p><p>数据元素不是孤立存在的，它们之间存在着某种关系，数据元素互相之间的关系成为 结构 是指 相互之间存在一种或多种特定关系 的数据元素集合或者说，数据结构是 带结构的 数据元素的集合</p></div><div class="note custom-block github-alert"><p class="custom-block-title">逻辑结构 和 物理结构 的关系</p><p></p><p>存储结构是逻辑关系的映象与元素本身的映象 逻辑结构是数据结构的抽象，存储结构是数据结构的实现 两者综合起来建立了 数据元素 之间的 结构关系</p></div><h2 id="_3-5-逻辑结构的分类" tabindex="-1">3.5 逻辑结构的分类 <a class="header-anchor" href="#_3-5-逻辑结构的分类" aria-label="Permalink to &quot;3.5 逻辑结构的分类&quot;">​</a></h2><h2 id="_3-6-存储结构的种类" tabindex="-1">3.6 存储结构的种类 <a class="header-anchor" href="#_3-6-存储结构的种类" aria-label="Permalink to &quot;3.6 存储结构的种类&quot;">​</a></h2><h3 id="a-顺序存储结构" tabindex="-1">A. 顺序存储结构 <a class="header-anchor" href="#a-顺序存储结构" aria-label="Permalink to &quot;A. 顺序存储结构&quot;">​</a></h3><h3 id="b-链式存储结构" tabindex="-1">B. 链式存储结构 <a class="header-anchor" href="#b-链式存储结构" aria-label="Permalink to &quot;B. 链式存储结构&quot;">​</a></h3><h3 id="c-索引存储结构" tabindex="-1">C. 索引存储结构 <a class="header-anchor" href="#c-索引存储结构" aria-label="Permalink to &quot;C. 索引存储结构&quot;">​</a></h3><h3 id="d-散列存储结构" tabindex="-1">D. 散列存储结构 <a class="header-anchor" href="#d-散列存储结构" aria-label="Permalink to &quot;D. 散列存储结构&quot;">​</a></h3><h2 id="_3-7-数据类型和抽象数据类型" tabindex="-1">3.7 数据类型和抽象数据类型 <a class="header-anchor" href="#_3-7-数据类型和抽象数据类型" aria-label="Permalink to &quot;3.7 数据类型和抽象数据类型&quot;">​</a></h2><h1 id="四、抽象类型的表示与实现" tabindex="-1">四、抽象类型的表示与实现 <a class="header-anchor" href="#四、抽象类型的表示与实现" aria-label="Permalink to &quot;四、抽象类型的表示与实现&quot;">​</a></h1><h2 id="_4-1-抽象数据类型-复数-的实现" tabindex="-1">4.1 抽象数据类型 复数 的实现 <a class="header-anchor" href="#_4-1-抽象数据类型-复数-的实现" aria-label="Permalink to &quot;4.1 抽象数据类型 复数 的实现&quot;">​</a></h2><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2><h1 id="五、总结" tabindex="-1">五、总结 <a class="header-anchor" href="#五、总结" aria-label="Permalink to &quot;五、总结&quot;">​</a></h1>',66),g=[c];function u(_,b,f,A,m,B){return e(),r("div",null,g)}const z=a(k,[["render",u]]);export{q as __pageData,z as default};
